docker network rm lhci-network
docker network create lhci-network

docker run -d -p 3306:3306 --name lhci-mysql-db --network lhci-network -e MYSQL_ROOT_PASSWORD=kostas77 -v /home/kostastseronis/CODE/lhci-server/lhci-mysql-db-data:/var/lib/mysql mysql

docker exec -it lhci-mysql-db mysql -uroot -p

CREATE DATABASE lhci;CREATE USER 'kostastseronis'@'%' IDENTIFIED BY 'kostas77';GRANT ALL PRIVILEGES ON lhci.* TO 'kostastseronis'@'%';FLUSH PRIVILEGES;

docker run -d -p 9001:9001 --name lhci-server --network lhci-network -v /home/kostastseronis/CODE/lhci-server/lighthouserc.json:/usr/src/lhci/lighthouserc.json patrickhulce/lhci-server

Here's what each component of the command does:
-it: This option ensures that Docker runs in interactive mode with a terminal, allowing you to interact with the LHCI wizard.
--rm: This option ensures that the Docker container is removed after you exit the interactive session. This is generally useful to keep your environment clean, especially when running containers in interactive mode for one-off commands.
-p 9001:9001: This binds port 9001 of your host machine to port 9001 of the container, which is the port LHCI server runs on.
-v /home/ec2-user/lighthouserc.json:/usr/src/lhci/lighthouserc.json: This mounts the lighthouserc.json file from your host machine to the specified path in the container. This ensures that when LHCI runs inside the container, it uses your configuration.patrickhulce/lhci-server: This is the name of the Docker image you're using.


Here's a rough outline of how you can manually create a new project using the Lighthouse CI server API:

    API Endpoint:
        The endpoint for creating a new project is usually POST /v1/projects.

    Sample cURL command:

    curl -X POST "http://localhost:9001/v1/projects" \
         -H "Content-Type: application/json" \
         -d '{
             "name": "My New Project",
             "externalUrl": "http://example.com",
             "slug": "my-new-project"
           }'

        Replace localhost with your server's address if it's not local.
        You can adjust the name, externalUrl, and slug as necessary.

    Response:
        The server should respond with a JSON payload that includes details about the project, including the token. This token is what you would use as the build token when running Lighthouse CI against this project.

---------------------------------------------------------------------------
EXAMPLE

curl -X POST "http://localhost:9001/v1/projects" \
     -H "Content-Type: application/json" \
     -d '{
         "name": "eCommerce-B2C-pdp-desktop",
         "externalUrl": "",
         "slug": "eCom-B2C"
       }'

response:
{"name":"eCom-Regional-USHS","externalUrl":"https://www.us.elsevierhealth.com/","slug":"ecom-regional-ushs","baseBranch":"master","adminToken":"RdlkgAxoMoFeSleQwq8l43AKoRKt6clASja8PDVL","token":"cf063c50-a66d-4368-b064-89c4d60f1821","id":"840b4e2a-10e2-4f0f-8b14-f2fe6276ff23","updatedAt":"2024-02-27T21:02:39.015Z","createdAt":"2024-02-27T21:02:39.015Z"}
chrome

{"name":"eCommerce-B2C-home-desktop","externalUrl":"","slug":"ecommerce-b2c-home-desktop","baseBranch":"master","adminToken":"1U6mSYqHP897h1WANcs1UPgP0KnTR2A7rnIlfoHh","token":"c11089bf-abc0-4719-9dff-cdfdc0990e35","id":"c940fb91-fc3c-4cee-bbd3-f3635457c726","updatedAt":"2024-04-05T17:49:04.526Z","createdAt":"2024-04-05T17:49:04.526Z"}
{"name":"eCommerce-B2C-home-mobile","externalUrl":"","slug":"ecommerce-b2c-home-mobile","baseBranch":"master","adminToken":"zrrUDfNkaUE0sGUmxafbl7zx6el6hgfI7xHPJ1j9","token":"7da28972-b163-4d78-94df-9eb87dabdec9","id":"6574e62b-9438-4a90-a8c7-28bc995dea8c","updatedAt":"2024-04-05T17:50:39.652Z","createdAt":"2024-04-05T17:50:39.652Z"}
{"name":"eCommerce-B2C-pdp-desktop","externalUrl":"","slug":"ecommerce-b2c-pdp-desktop","baseBranch":"master","adminToken":"NfX1PGbTm6ee1JCcQQpYlrJlu6MCzFal1ocdoUuE","token":"a70f585c-0320-4d24-aaf5-1afa57d48e76","id":"acc88047-63de-4d9e-97ca-caaa26365810","updatedAt":"2024-04-05T18:20:31.757Z","createdAt":"2024-04-05T18:20:31.757Z"}
{"name":"eCommerce-B2C-pdp-mobile","externalUrl":"","slug":"ecommerce-b2c-pdp-mobile","baseBranch":"master","adminToken":"gA68rScvoK6GnmuOPg4kjfcgaT6BjWlaLPQ0PR5o","token":"8d74a580-3601-4709-956c-8d99c0a7f742","id":"f297aaae-19a5-4786-a687-a2f6af23efe1","updatedAt":"2024-04-05T18:17:40.527Z","createdAt":"2024-04-05T18:17:40.527Z"}

LHCI_BUILD_CONTEXT__CURRENT_HASH='test124' LHCI_BUILD_CONTEXT__COMMIT_MESSAGE='test message' LHCI_BUILD_CONTEXT__AUTHOR='test author' LHCI_BUILD_CONTEXT__AVATAR_URL='test avatar url' LHCI_BUILD_CONTEXT__COMMIT_TIME='2024-02-27T11:30:00.000Z' npx lhci autorun

jenkins workspace on locally running jenkins can be found in 'kostastseronis@mini-pc:~$ cd /var/lib/jenkins/workspace'



JENKINS SHELL SCRIPT

#!/bin/bash

# Generate a random hash/branch using Node.js
export LHCI_BUILD_CONTEXT__CURRENT_HASH=$(node -e "console.log(require('crypto').createHash('md5').update(Date.now().toString() + Math.random().toString()).digest('hex'))")
#export LHCI_BUILD_CONTEXT__CURRENT_BRANCH=$(node -e "console.log(require('crypto').createHash('md5').update(Date.now().toString() + Math.random().toString()).digest('hex'))")
export LHCI_BUILD_CONTEXT__CURRENT_BRANCH='main'

# Set commit message using current date/time
export LHCI_BUILD_CONTEXT__COMMIT_MESSAGE=$(date +"%Y-%m-%d %H:%M:%S")

# Set other lhci environment variables
export LHCI_BUILD_CONTEXT__AUTHOR='tseronisk'
export LHCI_BUILD_CONTEXT__AVATAR_URL='N\\A'
export LHCI_BUILD_CONTEXT__COMMIT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
#export LHCI_GITHUB_TOKEN='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'

sudo apt update
#sudo apt-get install fonts-liberation
#sudo apt install -y wget gnupg
#wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 2>/dev/null
#sudo dpkg -i google-chrome-stable_current_amd64.deb

wget https://chromedriver.storage.googleapis.com/LATEST_RELEASE
export CHROMEDRIVER_VERSION=$(cat LATEST_RELEASE)
wget https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
unzip chromedriver_linux64.zip
sudo mv chromedriver /usr/local/bin/

google-chrome --version

ls -la
node -v
#npm install
npm install -g @lhci/cli@0.13.x
env
#sudo chmod 1777 /tmp

#npx lhci autorun
#lhci autorun --config=lighthouserc.json
npm run lhci-autorun-override-debug